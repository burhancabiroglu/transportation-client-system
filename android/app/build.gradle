plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


def envStorePass = System.getenv("STORE_PASSWORD")
def envKeyAlias = System.getenv("KEY_ALIAS")
def envKeyPass = System.getenv("KEY_PASSWORD")
def envStoreFile = System.getenv("STORE_FILE")


def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def getStorePass = { ->
    def storePass = keystoreProperties.containsKey("STORE_PASSWORD") ? keystoreProperties.getProperty("STORE_PASSWORD") : envStorePass
    return storePass
}

def getKeyAlias = { ->
    def keyAlias = keystoreProperties.containsKey("KEY_ALIAS") ? keystoreProperties.getProperty("KEY_ALIAS") : envKeyAlias
    return keyAlias
}

def getKeyPass = { ->
    def keyPass = keystoreProperties.containsKey("KEY_PASSWORD") ? keystoreProperties.getProperty("KEY_PASSWORD") : envKeyPass
    return keyPass
}

def getStoreFile = { ->
    def keyPass = keystoreProperties.containsKey("STORE_FILE") ? keystoreProperties.getProperty("STORE_FILE") : envStoreFile
    return keyPass
}


android {
    namespace "com.babi.babiconsultancy"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    
    signingConfigs {
        release {
            storeFile file(getStoreFile())
            storePassword getStorePass()
            keyAlias getKeyAlias()
            keyPassword getKeyPass()
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.babi.babiconsultancy"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "androidx.multidex:multidex:2.0.1"
}
